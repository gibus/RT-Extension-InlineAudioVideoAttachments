<%PERL>
# Find all the attachments which have parent $Parent
# For each of these attachments
foreach my $message ( @{ $Attachments->{ $Parent || 0 } || [] } ) {
    $m->comp( 'ShowMessageHeaders',
              WarnUnsigned   => $WarnUnsigned,
              Message        => $message,
              DisplayHeaders => \@DisplayHeaders,
            );

    my $name = defined $message->Filename && length $message->Filename ?  $message->Filename : '';
    my $should_render_download = $message->ContentLength || $name;

    $m->callback(CallbackName => 'BeforeAttachment', ARGSRef => \%ARGS, Object => $Object, Transaction => $Transaction, Attachment => $message, Name => $name, ShouldRenderDownload => \$should_render_download);

    if ($should_render_download) {
</%PERL>
<div class="downloadattachment">
% if (my $url = RT->System->ExternalStorageURLFor($message)) {
<a href="<% $url %>">
% } else {
<a href="<% $AttachmentPath %>/<% $Transaction->Id %>/<% $message->Id %>/<% $name | un %>">
% }
<&|/l&>Download</&> <% length $name ? $name : loc('(untitled)') %></a>\
% if ( $DownloadableHeaders && ! length $name && $message->ContentType =~ /text/  ) {
 / <a href="<% $AttachmentPath %>/WithHeaders/<% $message->Id %>"><% loc('with headers') %></a>
% }
% $m->callback(CallbackName => 'AfterDownloadLinks', ARGSRef => \%ARGS, Object => $Object, Transaction => $Transaction, Attachment => $message);
<br />
<span class="downloadcontenttype"><% $message->ContentType %> <% $message->FriendlyContentLength %></span>
</div>
%   }
%# If there is sub-messages, open a dedicated div
% if ( $Attachments->{ $message->id } ) {
<div class="messageattachments">
% } else {
<div class="messagebody">
% }
<%PERL>

$render_attachment->( $message );

$m->comp(
    $m->current_comp,
    %ARGS,
    Parent    => $message->id,
    ParentObj => $message,

    displayed_inline => $displayed_inline,
);

</%PERL>
</div>
% }
<%ARGS>
$Transaction
$Object => $Transaction->Object
$ShowHeaders => 0
$DownloadableHeaders => 1
$AttachmentPath => undef
$Attachments => {}
$AttachmentContent => {}
$Parent => 0
$ParentObj => undef
$WarnUnsigned => 0

# Keep track of CID images we display inline
$displayed_inline => {}
</%ARGS>
<%INIT>
my @DisplayHeaders=qw(_all);
if ( $Transaction->Type =~ /EmailRecord$/ ) {
    @DisplayHeaders = qw(To Cc Bcc);
}

# If the transaction has anything attached to it at all
elsif (!$ShowHeaders)  {
    @DisplayHeaders = qw(To From RT-Send-Cc Cc Bcc RT-Attach Date Subject);
    push @DisplayHeaders, 'RT-Send-Bcc' if RT->Config->Get('ShowBccHeader');
}

$m->callback(CallbackName => 'MassageDisplayHeaders', DisplayHeaders => \@DisplayHeaders, Transaction => $Transaction, ShowHeaders => $ShowHeaders);

my $render_attachment = sub {
    my $message = shift;
    my $name = defined $message->Filename && length $message->Filename ?  $message->Filename : '';

    my $content_type = lc $message->ContentType;

    # if it has a content-disposition: attachment, don't show inline
    my $disposition = $message->GetHeader('Content-Disposition');

    if ( $disposition && $disposition =~ /^\s*attachment/i ) {
        $disposition = 'attachment';
    } else {
        $disposition = 'inline';
    }

    # If it's text
    if ( $content_type =~ m{^(text|message)/} ) {
        my $max_size = RT->Config->Get( 'MaxInlineBody', $session{'CurrentUser'} );
        if ( $disposition ne 'inline' ) {
            $m->out('<p>'. loc( 'Message body is not shown because sender requested not to inline it.' ) .'</p>');
            return;
        }
        elsif ( length $name && RT->Config->Get('SuppressInlineTextFiles', $session{'CurrentUser'} ) ) {
            $m->out('<p>'. loc( 'Text file is not shown because it is disabled in preferences.' ) .'</p>');
            return;
        }
        elsif ( $max_size && $message->ContentLength > $max_size ) {
            $m->out('<p>'. loc( 'Message body is not shown because it is too large.' ) .'</p>');
            return;
        }

        if (

            # it's a toplevel object
            !$ParentObj

            # or its parent isn't a multipart alternative
            || ( $ParentObj->ContentType !~ m{^multipart/(?:alternative|related)$}i )

            # or it's of our prefered alterative type
            || (
                (
                    RT->Config->Get('PreferRichText', $session{CurrentUser})
                    && ( $content_type =~ m{^text/(?:html|enriched)$} )
                )
                || ( !RT->Config->Get('PreferRichText', $session{CurrentUser})
                    && ( $content_type !~ m{^text/(?:html|enriched)$} )
                )
            )
        ) {

            my $content;
            # If we've cached the content, use it from there
            if (my $x = $AttachmentContent->{ $Transaction->id }->{$message->id}) {
                $content = $x->Content;
            }
            else {
                $content = $message->Content;
            }

            $RT::Logger->debug(
                "Rendering attachment #". $message->id
                ." of '$content_type' type"
            );

            # if it's a text/html clean the body and show it
            if ( $content_type eq 'text/html' ) {
                $content = $m->comp( '/Elements/ScrubHTML', Content => $content );

                if (RT->Config->Get('ShowTransactionImages')) {
                    my @rewritten = RT::Interface::Web::RewriteInlineImages(
                        Content         => \$content,
                        Attachment      => $message,
                        # Not technically correct to search all parts of the
                        # MIME structure, but it saves having to go to the
                        # database again and is unlikely to break display.
                        Related         => [ map { @$_ } values %$Attachments ],
                        AttachmentPath  => $AttachmentPath,
                    );
                    $displayed_inline->{$_}++ for @rewritten;
                }

                $m->comp(
                    '/Elements/MakeClicky',
                    content => \$content,
                    html    => 1,
                    object  => $Object,
                );

                if ( !length $name && RT->Config->Get( 'QuoteFolding', $session{CurrentUser} ) ) {
                    eval {
                        require HTML::Quoted;
                        $content = HTML::Quoted->extract($content)
                    };
                    if ($@) {
                        RT->Logger->error(
                            "HTML::Quoted couldn't process attachment #@{[$message->id]}: $@."
                          . "  This is a bug, please report it to rt-bugs\@bestpractical.com.");
                    }
                }

                $m->comp(
                    'ShowMessageStanza',
                    Message     => $content,
                    Transaction => $Transaction,
                    ContentType => 'text/html',
                );
            }

            elsif ( $content_type eq 'text/enriched' ) {
                $content = $m->comp( '/Elements/ScrubHTML', Content => $content );
                $m->out( $content );
            }

            # It's a text type we don't have special handling for
            else {
                if ( !length $name && RT->Config->Get( 'QuoteFolding', $session{CurrentUser} ) ) {
                    eval {
                        require Text::Quoted;
                        Text::Quoted::set_quote_characters(undef);
                        $content = Text::Quoted::extract($content);
                    };
                    if ($@) {
                        RT->Logger->error(
                            "Text::Quoted couldn't process attachment #@{[$message->id]}: $@."
                          . "  This is a bug, please report it to rt-bugs\@bestpractical.com.");
                    }
                }

                $m->comp(
                    'ShowMessageStanza',
                    Message     => $content,
                    Transaction => $Transaction,
                    ContentType => 'text/plain',
                );
            }
        }
    }

    # if it's an image, show it as an image
    elsif ( $content_type =~ m{^image/} ) {
        if (not RT->Config->Get('ShowTransactionImages')) {
            $m->out('<p><i>'. loc( 'Image not shown because display is disabled in system configuration.' ) .'</i></p>');
            return;
        }
        elsif ( $displayed_inline->{$message->Id} ) {
            $m->out('<p><i>'. loc( 'Image displayed inline above' ) .'</i></p>');
            return;
        }
        elsif ( $disposition ne 'inline' ) {
            $m->out('<p>'. loc( 'Image not shown because sender requested not to inline it.' ) .'</p>');
            return;
        }

        my $filename = length $name ? $name : loc('(untitled)');
        my $efilename = $m->interp->apply_escapes( $filename, 'h' );

        my $url = RT->System->ExternalStorageURLFor($message)
               || $AttachmentPath .'/'. $Transaction->Id .'/'. $message->Id .'/'
                . $m->interp->apply_escapes( $filename, 'u', 'h' );

        $m->out(
            qq{<img alt="$efilename" title="$efilename" src="$url" />}
        );
    }

    # if it's an audio, show it with an audio player
    elsif ( $content_type =~ m{^audio/(?:mpeg|ogg|wav)$} ) {
        if ( $displayed_inline->{$message->Id} ) {
            $m->out('<p><i>'. loc( 'Audio displayed inline above' ) .'</i></p>');
            return;
        }
        elsif ( $disposition ne 'inline' ) {
            $m->out('<p>'. loc( 'Audio not shown because sender requested not to inline it.' ) .'</p>');
            return;
        }

        my $filename = length $name ? $name : loc('(untitled)');
        my $efilename = $m->interp->apply_escapes( $filename, 'h' );

        my $url = RT->System->ExternalStorageURLFor($message)
               || $AttachmentPath .'/'. $Transaction->Id .'/'. $message->Id .'/'
                . $m->interp->apply_escapes( $filename, 'u', 'h' );

        $m->out(
            qq{<audio controls><source src="$url" type="$content_type">} .
            loc('Your browser does not support the audio tag.') .
            qq{</audio>}
        );
    }

    # if it's a video, show it with a video player
    elsif ( $content_type =~ m{^video/(?:mp4|webm|ogg)$} ) {
        if ( $displayed_inline->{$message->Id} ) {
            $m->out('<p><i>'. loc( 'Video displayed inline above' ) .'</i></p>');
            return;
        }
        elsif ( $disposition ne 'inline' ) {
            $m->out('<p>'. loc( 'Video not shown because sender requested not to inline it.' ) .'</p>');
            return;
        }

        my $filename = length $name ? $name : loc('(untitled)');
        my $efilename = $m->interp->apply_escapes( $filename, 'h' );

        my $url = RT->System->ExternalStorageURLFor($message)
               || $AttachmentPath .'/'. $Transaction->Id .'/'. $message->Id .'/'
                . $m->interp->apply_escapes( $filename, 'u', 'h' );

        $m->out(
            qq{<video controls><source src="$url" type="$content_type">} .
            loc('Your browser does not support the video tag.') .
            qq{</video>}
        );
    }
    elsif ( $message->ContentLength && $message->ContentLength > 0 ) {
        $m->out( '<p>' .
            loc( 'Message body not shown because it is not plain text.' ) .
            '</p>'
        );
    }
};

</%INIT>
